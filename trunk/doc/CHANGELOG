VERSION = V-0-1-0-d-11 : commit
=====================

DATE = 13.01.2014
AUTOR = maik

STATE = la2-run: lalinea compileable and running
        all other targets are not checked

ADD = OpenOCD :more flexible configuration and also tried with OpenOCD 0.7.0
      usr/act: rc_servo  (rc servo motor)
      usr/sen: encoder  (the encoder is made with the groove ir-reflective sensors)
      usr/sen: usonic_ranger (groove ultra sonic ranger)
      bsp/la2/usr/lalinea (a line follower robot application)
      new simple template for homepage and api(GPL license, the old had a creative commons license)
      put homepage to cvs tree and add projects side for planned freoMOST projects(like lalinea)
      put build_cross.sh script and cross dir to cvs tree 

FIX = the descriptor operator for threads must implement delete function to be able to delete
      dead threads.
      !for CLI switch the active CLI thread can not switch to a other CLI if it blocks( as
      it can not read data (function keys) from input-> this is not a nice behavior but currently i dont
      change it!



VERSION = V-0-1-0-d-10 : committed (just development)
=====================

DATE = 27.11.2013
AUTOR = maik

STATE =

ADD = MOST_BUILD := debug|run (just show build variant in version string)

FIX = la2-run: fixed flash_26LV800BTC,
               (the behavior for __attribute__ (section) seems to be different for
                debug code or run code, for optimized code the function for .ramcode section must be
                extern, subfunctions can be static, else the the .ramcode section is empty !)
                for pflid added missing volatile
      mfs: stream -> read, write return 0 instead of EOF (for all implemented streams)
                     if an error occurs the USO_current()->error must be used as we can not return an error
      uso/arch/cpu: io_ports implementation (not completed) the different io_ports from dev were removed.
      



VERSION = V-0-1-0-d-9 : tagged
=====================

DATE = 27.11.2013
AUTOR = maik

STATE = pc - run: MOST_REMOVE_UNUSED == ON is not supported by pc currently!
                  DEV_cpudelay() does nothing (is Qemu also optimizing code ??? )
                  the rest seems to work !!!

        la2 - run: the optimized code does not work (errors with flash (efl, pflid))
                   must compile with no optimization!
                   MOST_REMOVE_UNUSED == OFF 
        la2 -debug: boot and test working (write and read config, download(erasing flash and ymodem)) !!!
                    frame not testet

        mdc - run: all targets compileable, boot and test running (config, download(ymodem)) !!! ,   network not testet
                   MOST_REMOVE_UNUSED == OFF (ON not testet)
                   putboot and frame not testet

        sam - run: boot and test running(config, download(ymodem) !!! network not testet
                   MOST_REMOVE_UNUSED == OFF (ON not testet)
                   but the board is broken, it is only useable with Jtag, it does not boot automatically :(


ADD = use vt100 escape sequences subset
      tty switch: you can switch between max 4 CLI with F1, F2, F3, F4
      ACE lib, add scanf functions and strtol functions


FIX = Maybe i broke one of my SD cards :( is this possible ? it was an old one.
      it worked one day and next day it was dead (also on a normal PC)
      (maybe wrong initialization?  or run code (optimized)
      which does not work correctly  Urrgs??) 
      
      !Oh my God, big bug and how much bugs retain ? !
      !!!! Idle thread is not allowed to to block so it must not use USO_log_printf
           and ACE_printf (and similar functions) !!!!
      ?i think i forgot this and changed synchronization for USO_log and DEV_serial
      from disabling interrupts to blocking functions (long ago) which also makes sense or
      maybe initially for USO_log only the non blocking serial io was allowed.
      As long the output pipe buffer did not get full the problem was not recognized ?
      !!!! so moved all code with logging to the start thread !!!!
      
      MDC:bsp(putboot), the unused network code is removed, i try to do this just with the code structure
      so that the objects are not used and avoid preprocessor switches (#if something) as i don't like them.
      The putboot size is reduced about 20 KB
      
      ACE_EOF is now biggest negative integer (to avoid conflicts with signed char)
      removed ace/cpu.h
      
      ls uses set_cursor_position instead of tabs !
      
      version.h (repository handling definition - will make no branches for testing) haha if i ever get so far
      
      dev/arch/ibmpc: cleanup: console is responsible for screen and keyboard
                      screen code in own file screen.c
                      vt100 code for screen in own file vt100_output.c
                      remove keyboard thread (interrupt routine is now a bit longer)
                      tty has just one io_stream for in- and output
      dev/arch/ibmpc: console escape sequences (was not processed) and backspace
      bsp/board/usr: Makefile NAP depends on CLI, changed to CLI depends on NAP!
      nap: move exec to cli, nap is only for application protocols but not for the execs!
      bsp: move config and bootp to cli just to have one code source.
      move descriptor print to cli/list
      move descriptor print info to cli/info  
      there is following layer layout:

      ======================
            APP
      ----------------------
            BSP
      ======================
            USR
      ======================
            CLI
      ----------------------
            MFS
      ----------------------
            NAP
      ----------------------
            NET
      ----------------------
            DEV
      ----------------------
      ACE ; USO ; SYSFS
      ======================



VERSION = V-0-1-0-d-8 : labeled
=====================

DATE = 14.11.2013
AUTOR = maik

STATE = all targets and apps are compileable(no fresh checkout)

ADD = descripter control functionality, change descriptor info interface, descriptor_op delete function

FIX = ace/err.h   sys errors must come first because of EOF!
      BSP PC: Copy_2_Config template files
      CLI and VFS improvments
      commandline has now a gramma: INSTREAM < COMMAND (ARG) > OUTSTREAM &
      INSTREAM <      :is optional, redirect stdin to INSTREAM
      COMMAND         :is mandatory name of the command
      (ARG)           :the optional argument must be enclosed in brackets (this is unusual, but the arg is given to the command as once)
      > OUTSTREAM     :is optional, redirect stdout to OUTSTREAM
      &               :is optional, start exec in own thread
      the arg string is now parsed in the exec and commands instead of the interpreter,
      so also to exec more than one arg can be given.
      the pipe is now created with the new(create) command.
      exec and run commands are removed


VERSION = V-0.1.0-d-7 : labeled (V-0-1-0-d-7)
=====================

DATE = 07.09.2013
AUTOR = maik

STATE = compileable and running, SAM7_EX256 board is broken(pluged EXT connector wrong and got +5V to GND and +3,3V to reset,
        boot from flash does not work and some other (reset, pwm ?) seems to be broken.) :(. 

ADD = bsp/la2 adc, pwm, flash support, bootloader is now working (only with y-modem, eth still missing)
      bsp/la2/usr/test line following robot(in development)
      bsp/mdc   HW random number generator
      usr/dpy   LCD character display
      usr/sen   create library for sensors
      usr/act   create library for actors
      
FIX = check size of bin file (if it fits to reserved flash region) as the linker script check only the size of the text segment
      but the bin file is the text segment (text, rodata) concatenated with the data segment.
      Also increased the reserved flash size for the bootloader (mdc: putboot = 64k, boot = 128k, app = 320k,
      sam: boot = 80k, app = 176k, la2: boot = 128k, app = 896k), for you the size of the bootloader may be to big but
      for me currently it is ok as i am interested in development and don't need a small bootloader for a special purpose.
      Also the object files from the bsp/sys (arch/init) are defined in the application Makefile explicit and independently,
      as the applications may need different objects. So the size of the binary can be reduced
      (gcc links all defined objects to the binary even if they are not used,
      (this is not valid for the objects from the static libraries) ). 


VERSION = V-0.1.0-d-6 : labeled (V-0-1-0-d-6)
=====================

DATE = 16.06.2013
AUTOR = maik

STATE =compileable and running

ADD =bsp/la2 (support Olimex board SAM7-LA2),
     bsp/pc  (suport ibmpc only in Qemu)
     dev/arch/ibmpc (ibmpc architecture)
     dev/arch/at91sam7a2 (AT91SAM7-A2 architecture)

FIX =moved dev/arch/at91 to dev/arch/at91sam7x
     moved dev/arch/h8 to  dev/arch/h83003



VERSION = V-0.1.0-d-4 : labeled (V-0-1-0-d-4)
=====================

DATE = 12.01.2013
AUTOR = maik

STATE = SAM : compilable and running
        MDC : compilable and running
        open, close directory function may be not convenient to walk through the directory tree,
        maybe introduce a walk function?
        
ADD =   ymodem receive,
        different build directories for run and debug binaries,
        add Config file for each application,
        <build all> just builds the configured application,
        generate function sections and remove unused sections (configurable),
        cleanup mfs/vfs and add block device interface,
        cli/add pipe and stdio redirection,
        add serial receive timeout,
        serial, tty  IO control function and CTRL-D, 
        axfr receive and send files,
        SAM watchdog enabled,
        SAM user reset ? acctually polled in run_led,
        just one download mechanism for updating bootloader and application:
        download is now a block device, it can be written by tftp_g and ym_r,
        ls command and MFS_resolve(path),

FIX=    SAM for start_Appliction, start_Bootloader -> do remap because remap toggles the memmory mapping,
        io_spi CS 


VERSION = V-0.1.0-d-3 : labeled (V-0-1-0-d-3)
=====================

DATE = 23.06.2012
AUTOR = maik

STATE = SAM : compilable and running
        MDC : compilable and running (serial eeprom does not work)
        
ADD = ACE DEV: time, rtc,
	  BSP: Audio out(beep),
	  NAP: Syslog client
	  ACE BSP: ASSERT, PANIC 
	  CHANGELOG file
	  Ubuntu OpenOCD 0.5.0	
	  GDB support for Eclipse
	  Build structure improvements
	  tty to handle CR/LF conversion
	  Doxygen: just one doc folder for all sys-, one for all usr -libraries
	  rename Makefiles.* all do Makefile so that editors can handle tabs (instead of spaces)
	  error headers with error constant definitions
      io_spi for serial eeprom(not working correct, cs has do be done)
	  
FIX = NET: error in emac sending (only one netbuf was transmitted)


VERSION = V-0.1.0-d-2 : labeled (V-0-1-0-d-2)
=====================

DATE = 01.12.2010
AUTOR = maik

STATE = SAM, MDC compileable and running, Ubuntu OpenOCD 0.2.0 in development
