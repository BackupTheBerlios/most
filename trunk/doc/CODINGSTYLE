The coding style was not defined from the beginning of the project, so it is not 
used rigorous through the project, but it shall be used for changes and extensions.



1.)DESIGN PRINCIPLES
====================

1.1.)Simplicity (Keep It Simple, Stupid)
----------------------------------------

Perfection is reached not when there is no longer anything to add,
but when there is no longer anything to take away.
(Antoine de St. Exupery)

1.2.)Completeness
-----------------

Everything should be as simple as possible, but no simpler.
(Albert Einstein)

For a given functionality there should be a minimum of mechanism
and a maximum of clarity.

1.3.)Efficiency
---------------

If a feature cannot be implemented efficiently, it is probably not worth having.
But don't care too much for optimization until you have a working system and
you recognize bad performance.
Put the focus on doing things right and not on optimization.





2.)SYNCHRONIZATION
==================

Definition of the terms reentrant and thread-safe:

To be reentrant, a computer program or routine:

    * Must hold no static (or global) non-constant data.
    * Must not return the address to static (or global) non-constant data.
    * Must work only on the data provided to it by the caller.
    * Must not rely on locks to singleton resources.
    * Must not modify its own code.
    * Must not call non-reentrant computer programs or routines.


    * reentrant - Describes a function which can be called simultaneously by multiple threads
                  when each invocation of the function references unique data(call by reference).
                  Calling a reentrant function simultaneously with the same data is not safe,
                  and such invocations should be serialized.
                  "call by value" is save.

A reentrant mutex is a mutual exclusion mechanism. In a reentrant mutex, the same thread can acquire the lock multiple times.
However, the lock must be released the same number of times or else other threads will be unable to acquire the lock.
A reentrant mutex has some similarities to a counting semaphore.
If for counting semaphores, a thread that is already holding a normal lock attempts to acquire the same lock again,
then it will deadlock.


    * thread-safe - Describes a function which can be called simultaneously by multiple threads
                    when each invocation references shared data.
                    Calling a thread-safe function simultaneously with the same data is safe,
                    since all access to the shared data are serialized. 
                    Synchronization is done with mutexes.                     

 	* interrupt-safe - Same as thread-safe but also valid for interrupts.
 	                   Synchronization is done with disabling interrupts.

	


3.) NAMING CONVENTIONS
======================

3.1.) Suffixes to function and variable names.
----------------------------------------------

All names of typedefs must have the suffix _t.
For Example: typedef struct name name_t;

To show synchronization, function names may be extended with:
_r    function is reentrant.
_s    function is thread safe.
_is   function is interrupt safe.
_ns   function is not reentrant and not synchronized.

If there is a behavior for blocking or non blocking, function names may be extended with:
_b    a thread may block
_nb   a thread will not block


3.2.) Namespaces and Access Restrictions 
----------------------------------------

All global functions and variables and defines in a library begin with 3 big letters and an underscore.

Public: 
-------

Functions, variables and defines which have do be used from outside the library must have
the library prefix:

    System libraries:

	ACE_ (A C Environment)
	USO_ (Micro System Operation)
	DEV_ (DEVices)
	CLI_ (Comman Line Interpreter)
	NET_ (NETwork)
	NAP_ (Network Application Protocols)
 	MFS_ (Mini File System)

	Board support package:

	MDC_ (Most Development Computer)
	SAM_ (Olimex SAM board)

	user libs:

	DPY_  (DisPlaYs)
	TST   (TeST)

The only exception to this rules are functions needed by GCC (memcpy,..).
Also some macros like NULL have no prefix because of syntax highlighting.

-----------------------  private, public ----------------------------------------------------------

3.3.) Types 
-----------

All structures which are act as types, this means you have a structure of data and functions 
which work on this data, shall be defined with a typedef and structure name with an _t.
In Emacs than the syntax highlighting is correct for this types.
Most the member variables of such structures are private.   
Only use the functional interface for that type.

struct PRI_name{
	type private_member1;
	type private_member2;
}; 

typedef struct PRI_name PRI_name_t;



Comment:

We want to export the type PRI_name_t but to use this type static in a other source file 
we also have to export the structure PRI_name so that the compiler can determine the size
of the type.
But with exporting the structure with the header file, all private members are visible to the other
source files and the data encapsulation has gone.
This is one of the main problems i have with the programming language C.
The programmers must use a rigorous programming style.

3.4.) Defines and macros 
------------------------

shall always be written in UPPERCASE LETTERS.
Avoid definitions and macros use const and inline functions instead.


3.5.) Function and Variable names
---------------------------------

Write everything with lowercase letters seperated  with an underscore.

shall look like:

function_name()   
variable_name

and not like:

functionName()
VariableName

4.) DOCUMENTATION
=================		       	

4.1.) The header files act as interface, so the doxygen comments are just used in the header files and
      only to public data and functions which must be knowen by the user.
      PRI_ (private) structures are not documented.
      PRO_ (protected) structures should be documented. This is for developers, here users normally are developers
            with the need to change maybe something in the library and the documentation shall also document the library
            design.

4.2.) Implementation details are documented in the c files just as normal comments.

4.3.) Doxygen java style:

/** @defgroup filename filename.h
 *
 * Modul description.
 * @{
 */

 /**
 * Brief description.
 * Detailed description.
 *
 * @param name : Description.
 * @return Description.
 */
 type function(type name);
 
 
 /** Description. */
 struct name{
 	type member_1;        /**< Member 1 description. */
 	type member_2;        /**< Member 2 description. */
 }
 
 /** @}
 */
 
 
5.) POLYMORPHISM
=================

It works something like this for example:

To use any types with a linked list the types must also be a list node.
To achieve this the first entry in the types structure is a list node type.
Then the type can be casted to a list node.
How the member are placed depends on the complier and is not defined, but this works fine with
GCC. If there is a better way?

Example:

struct USO_name {
	USO_node_t node;
	type member;
	..
}

typdef struct USO_name USO_name_t;

USO_list_t list;
USO_name_t name;
...
USO_enqueue(&list, (USO_node_t*)&name);
...

 
 6.) HEADER FILES
 =================
 
 #include <file>
    This variant is used for system header files. It searches for a file named file in a standard
    list of system directories. You can prepend directories to this list with the -I option.
 
 #include "file"
    This variant is used for header files of your own program. It searches for a file named file
    first in the directory containing the current file, then in the quote directories and then the
    same directories used for <file>.



7.) OBJECT INITIALIZATION
===========================

init()        do Initialization
clean()       do Cleanup

new()         create Object and call init()
delete()      call clean() and delete Object

install()     install Object in SYSFS
remove()      remove Object from SYSFS
