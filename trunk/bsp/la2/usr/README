Board support package for the Olimex SAM7-LA2 board!
=======================================================
This bsp extends the olimex board with some io according to my needs!

Applications:
boot: bootloader for downloading the application via y-modem or tftp
frame: has to be done
test: has to be done


OpenOCD Howto:
==============

Support for parallel(wiggler) and usb(olimex-arm-usb-ocd) interface.
(but you should be able to use each interface supported by openocd)

compile OpenOCD:
--enable-parport
--enable-parport-ppdev
--enable-ft2232_ftd2xx
--with-ftd2xx=/path/to/ftdd2xx
the ftd2xx library is used, this library must also be installed to /usr/lib.

so in debian or ubuntu i install just openocd with the installer and thats it!

I do not use the original configuration files coming with openocd but you may use it
Configuration files are placed in MOST_ROOT/etc/ocd/ and MOST_ROOT/bsp/<board>/openocd.cfg
and MOST_ROOT/bsp/<board>/usr/<application>/ocd/ .

use <app>/make ocd-program for writing the binary to the target.
use <app>/make ocd-reset for reseting the target.
use <app>/make ocd-debug for running the ocd-serer which will be used by gdb.
                         (in eclipse run make ocd-debug as an external tool)
use gdb with emacs (copy the .gdbinit file to ./debug and start emacs in the debug directory)
use gdb in eclipse (debug: remote application)

in emacs use  "ALT-x gdb" for running gdb.
correct name to your arm-gdb instead of the linux gdb
as gdb file the <app>.elf file is used, the <app>.stripped and <app>.bin files do not contain debug information.

For debuging in the flash only 2 hardware breakpoints can be used!
(before setting a new breakpoint, delete the old one)
You can place the code for debugging in the ramcode section!

